fit1=glm(data1 ~ dose, family = binomial(link = "probit"))
fit1=glm(data1 ~ dos, family = binomial(link = "probit"))
fit2=glm(data2 ~ dos, family = binomial(link = "probit"))
plot(fit1)
plot(dos,fit1$fitted.values)
lines(dos,fit2$fitted.values)
pnorm(.17)
qnorm(.17)
?logit
log(.17/(1-.17))
data1=c(0,0,0,0,0,0,0,1,1,1,1,1)
data2=c(0,0,0,0,0,1,1,1,1,1,1,1)
dose=c(1,1,1,2,2,2,3,3,3,4,4,4)
rbind(data1,data2,dose)
fit1=glm(data1 ~ dose, family = binomial(link = "probit"))
fit1=glm(data2 ~ dose, family = binomial(link = "probit"))
plot(dos,fit1$fitted.values,type="l",col="red")
plot(dose,fit1$fitted.values,type="l",col="red")
lines(dose,fit2$fitted.values,col="blue")
fit1=glm(data1 ~ dose, family = binomial(link = "probit"))
fit2=glm(data2 ~ dose, family = binomial(link = "probit"))
plot(dose,fit1$fitted.values,type="l",col="red")
lines(dose,fit2$fitted.values,col="blue")
abline(h=/5)
abline(h=.5)
data1=c(0,0,0,0,0,0,0,1,1,1,1,1)
data2=c(0,0,0,0,0,1,1,1,1,1,1,1)
rbind(data1,data2,dose)
fit1=glm(data1 ~ dose, family = binomial(link = "probit"))
fit2=glm(data2 ~ dose, family = binomial(link = "probit"))
plot(dose,fit1$fitted.values,type="l",col="red")
lines(dose,fit2$fitted.values,col="blue")
abline(h=.5,col="gray")
qnorm(0)
pnorm(0)
qnorm(0.17,5,1)
qnorm(0.5,5,1)
?probit
sqrt(400)
sqrt(2900)
library("RGtk2")
install.packages("gplots")
library(gplots)
install.packages("blockmodeling")
library(blockmodeling)
install.packages("~/Dropbox/Public/EBSeq_Package/EBSeq_1.1.6.tar.gz", repos=NULL, type="source")
library(EBSeq)
seywd("/Users/ningleng/Dropbox/Public/EBSeq_Package/Interface/EBSeq_Interface")
library(EBSeq)
QuantileNorm
quantile(1:10,.5)
quantile(1:10,.9)
aa=1:1000
bb=aa
bb[990:1000]=3000
cor(aa,bb)
cc=bb
cc=aa
cc[1:10]=100
cor(aa,cc)
cor(aa,bb,method="spearman")
cor(aa,cc,method="spearman")
?t
?pt
pt
library(gplots)
aa=redgreen(10)
plot(1:10,col=aa)
aa
?redgreen
bb=colorpanel(10,"#FF0000")
plot(1:10,col="#FF0000")
plot(1:10,col="#FF8000")
plot(1:10,col="#FF8080")
plot(1:10,col="#FFBFBF")
bb=colorpanel(10,"#FFBFBF","#FF8080","#FF0000")
plot(1:10,col=bb)
bb=colorpanel(10,"#FFBF00","#FF8000","#FF0000")
plot(1:10,col=bb)
?redgreen
cc=redblue(10)
plot(1:10,col=cc)
cc=bluered(10)
plot(1:10,col=cc)
cc=bluered(10^5)
plot(1:10^5,col=cc)
cc=bluered(100)
plot(1:100,col=cc)
cc=bluered(90)
getwd()
write.csv(cc,file="ColorForTan.csv",quote=F)
cc=bluered(91)
write.csv(cc,file="ColorForTan.csv",quote=F)
install.packages("biocView")
install.packages("biocViews")
library(DESeq)
install.packages(DESeq)
install.packages("DESeq")
source("http://bioconductor.org/biocLite.R")#
biocLite("DESeq")
system.time()
aa=system.time()
source("http://bioconductor.org/packages/release/bioc/vignettes/DESeq/inst/doc/DESeq.R")
demo(DESeq)
source("http://bioconductor.org/biocLite.R")#
biocLite("baySeq")
source("http://www.bioconductor.org/packages/release/bioc/vignettes/baySeq/inst/doc/baySeq.R")
source("http://bioconductor.org/biocLite.R")#
biocLite("DEXSeq")
source("http://watson.nci.nih.gov/bioc_mirror/packages/2.9/bioc/vignettes/DEXSeq/inst/doc/DEXSeq.R")
source("http://bioconductor.org/biocLite.R")#
biocLite("pasilla")
source("http://watson.nci.nih.gov/bioc_mirror/packages/2.9/bioc/vignettes/DEXSeq/inst/doc/DEXSeq.R")
source("http://bioconductor.org/packages/release/bioc/vignettes/DESeq/inst/doc/DESeq.R")
biocLite("vsn")
source("http://bioconductor.org/packages/release/bioc/vignettes/DESeq/inst/doc/DESeq.R")
library(EBSeq)
vignette()
vignette(EBSeq)
vignette(package="EBSeq")
data(IsoMultiList)
str(IsoMultiList)
x=rnorm(10)
y=rnorm(10)
z=rnorm(10)
lm(z~x+y)
lm(z~x+offset(y))
lm(z~x+offset(y)*1)
lm(z~x+offset(y)*2)
lm(z~offset(I(y*2)+x))
lm(z~offset(I(y*2))+x)
lm(z~x+y)
lm(z~offset(I(y*.18))+x)
lm(z~offset(I(y*.2))+x)
glm(z~offset(I(y*.2))+x,family="Poisson")
glm(z~offset(I(y*.2))+x,family="poisson")
glm(c(1:10)~offset(I(y*.2))+x,family="poisson")
glm(c(1:10)~offset(I(y*2))+x,family="poisson")
I(x)
x
str(I(x))
?I
glm(c(1:10)~offset(y*2)+x,family="poisson")
glm(c(1:10)~offset(I(y*2))+x,family="poisson")
source("http://bioconductor.org/biocLite.R")#
biocLite("EBSeq")
?bioLite
?biocLite
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")#
biocLite("EBSeq")
biocLite()
?biocLite
chooseBioCmirror()
biocValid()
update.packages(repos=biocinstallRepos(), ask=FALSE)
biocLite("EBSeq")
devel = "http://bioconductor.org/packages/2.13/bioc"
biocLite("EBSeq", siteRepos = devel, suppressUpdates = TRUE, type = "source")
biocLite("EBSeq", siteRepos = devel)
library(EBSeq)
sessioninfo()
sessionInfo()
demo(EBSeq)
QuantileNorm
sessionInfo()
w=8:18
aa=8/w
ww-.5
sum(abs(aa-.5))
aa-abs(aa-.5)
aa
.18-abs(aa-.5)
abs(aa-.5)
dd=abs(aa-.5)
ss=dd/sum(dd)
ss
qq=1-ss
qq
qq/sum(qq)
sum(qq)
sum("aa")
library(EBSeq)
PostFC
source("/Users/ningleng/Dropbox/Public/EBSeq_Package/Interface/EBSeq_Interface/Make.R")
install.packages("RGtk2")
source("/Users/ningleng/Dropbox/Public/EBSeq_Package/Interface/EBSeq_Interface/Make.R")
library(EBSeq)
EBTest
data(GeneMat)
GeneMat=rbind(GeneMat,0)
str(GeneMat)
rownames(GeneMat)[1001]="Gene_all0"
Sizes=MedianNorm(GeneMat)
EBOut=EBTest(Data=GeneMat,#
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
PP=GetPPMat(EBOut)
str(PP)
PPall=EBOut$PPMatWith0
str(PPall)
PPall[1001,]
install.packages("gplots")
packageVersion(gplots)
packageVersion(gplot)
install.packages("rJava", repos = "http://cran.us.r-project.org/")
install.packages("gplots", repos = "http://cran.us.r-project.org/bin/macox/contrib/2.14")
install.packages("gplots", repos = "http://cran.us.r-project.org/bin/macox/contrib/2.15")
install.packages("gplots", repos = "http://cran.us.r-project.org/")
install.packages("gplots", repos = "http://cran.r-project.org/src/contrib/Archive/gplots/")
install.packages("http://cran.r-project.org/src/contrib/Archive/gplots/gplots_2.0.7.tar.gz")
installed.packages()
aa=installed.packages()
str(aa)
library(OBBIToolbox)#
packageVersion("OBBIToolbox")#
set.seed(403)#
test1 <- data.frame( list(#
ID=paste0("Sample",1:400),#
time=c(rpois(100,50), rpois(100,55), rpois(100,45),rpois(100,40)) ,#
status=rbinom(400,1,.8),#
trtpbo=rep(c("TRT","TRT","PBO","PBO"), c(105, 103, 93, 99)),#
genetics=rep(c("WT","MT","WT","MT"), c(105, 103, 93, 99)),#
sex=sample(c("Female","Male"),400,replace=T),#
region=sample(c("NA","EU","Asia", "Africa","Other"),400, replace=T),#
priorA = sample(c("YES","NO"),400, replace=T),#
priorB = sample(c("YES","NO"),400, replace=T),#
priorC = sample(c("YES","NO"),400, replace=T),#
priorD = sample(c("YES","NO"),400, replace=T),#
geneexpA = round(rnorm(400,200,40)),#
ER=sample(c("ER+/PgR+","ER-/PgR+", "ER+/PgR-","ER-/PgR-"),400,replace=T)) )
PropOut1= calcPropDiff(Var = "trtpbo", CovOfInt = c("priorA","priorB","priorC","priorD"),#
OBBI.object = dataOBBI,#
VarLevels=c("PBO","TRT"), CovLevels= c("YES","NO"), lattice=NULL,#
type="Raw", WithNumber=T)
dataOBBI = setOBBI(test1, description = "Examples", pgm.path ="~/",#
cmpd = "CMPD", prot = "Demo.R")
PropOut1= calcPropDiff(Var = "trtpbo", CovOfInt = c("priorA","priorB","priorC","priorD"),#
OBBI.object = dataOBBI,#
VarLevels=c("PBO","TRT"), CovLevels= c("YES","NO"), lattice=NULL,#
type="Raw", WithNumber=T)
str(PropOut1)
PropOut1$PropEst
PropOut1$PropCI
PropOut1$PropChar
PropOut1$PropSize
??calcPropDiff
?calcPropDiff
HROut6= calcBalanceHR(Time="time", Censor="status", Var = "trtpbo",#
CovOfInt = c("priorA","priorB","priorC","priorD"),#
OBBI.object = dataOBBI, EstimateFullData=T,#
AddFormula= "+ER",#
VarLevels=c("PBO","TRT"), CovLevels= c("YES","NO"),#
lattice="sex", type="Raw", vlinePos=.3, Sym=F,#
WithNumber=T)
str(HROut6)
require(go.db)
require("go.db")
require("GO.db")
library(GO.db)
install.packages("GO.db")
library("GO.db")
install.packages("GO.db")
x=c(1,2,3,3,5,9,10)
y=c(10,12,14,15,19,22,25)
lm(y~x, weights=c(1,1,.5,.5,1,1,1))
aa=lm(y~x, weights=c(1,1,.5,.5,1,1,1))
plot(aa)
6000+5888+5888+5888
3500ï¼Š6
3500*6
install.pakages("DESeq2")
install.packages("DESeq2")
plot(1,1)
arrow(c(.6,.8),c(.6,.8),c(.7,.9),c(1.2,1.4))
arrows(c(.6,.8),c(.6,.8),c(.7,.9),c(1.2,1.4))
par(las=2)
plot(1,1)
?boxplot
library(EBSeq)
EBTest
V=c(0,0,0,0,3,120)
quantile(V,.75)
library(outliers)
getwd()
library(shiny)
runApp("~/Documents/RNA-seq/Github-repo/OEFinder/")
